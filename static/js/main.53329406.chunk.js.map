{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","frameSize","updateFrameSize","itemWidth","updateItemWidth","step","updateStep","animationDuration","updateAnimationDuration","infinite","updateInfinite","useState","offset","setOffset","maxOffset","length","carouselStyles","useEffect","scrollWidth","document","documentElement","style","setProperty","className","type","onClick","prevOffset","map","imgSrc","index","src","alt","title","value","min","max","onChange","e","newValue","parseInt","target","Number","isNaN","newDuration","placeholder","val","App","state","newStep","setState","newWidth","newInfinite","newSize","this","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.53329406.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Carousel.scss';\n\ntype CarouselProps = {\n  images: string[];\n  step: number;\n  updateStep: (value: number) => void,\n  frameSize: number;\n  updateFrameSize: (value: number) => void,\n  itemWidth: number;\n  updateItemWidth: (value: number) => void,\n  animationDuration: number;\n  updateAnimationDuration: (value: number) => void,\n  infinite: boolean,\n  updateInfinite: (value: boolean) => void,\n};\n\ntype CSSProperties = React.CSSProperties & {\n  '--transform-offset': string;\n  '--image-size': string;\n  '--frame-size': string;\n  '--animation-duration': string;\n};\n\nconst Carousel: React.FC<CarouselProps> = ({\n  images,\n  frameSize,\n  updateFrameSize,\n\n  itemWidth,\n  updateItemWidth,\n\n  step,\n  updateStep,\n  animationDuration,\n  updateAnimationDuration,\n\n  infinite,\n  updateInfinite,\n}) => {\n  const [offset, setOffset] = useState(0);\n  const maxOffset = images.length - frameSize;\n\n  const carouselStyles: CSSProperties = {\n    '--transform-offset': `-${offset * itemWidth}px`,\n    '--image-size': `${itemWidth}px`,\n    '--frame-size': `${frameSize}`,\n    '--animation-duration': `${animationDuration}ms`,\n  };\n\n  const handlePrev = () => {\n    if (offset >= step) {\n      setOffset(prevOffset => prevOffset - step);\n    } else if (infinite) {\n      setOffset(maxOffset);\n    } else {\n      setOffset(0);\n    }\n  };\n\n  const handleNext = () => {\n    if (offset + step < maxOffset) {\n      setOffset(prevOffset => prevOffset + step);\n    } else if (infinite) {\n      setOffset(0);\n    } else {\n      setOffset(maxOffset);\n    }\n  };\n\n  const handleWidthChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = parseInt(e.target.value, 10);\n\n    if (!Number.isNaN(newValue)) {\n      updateItemWidth(newValue);\n    }\n  };\n\n  const handleAnimationDurationChange\n  = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newDuration = parseInt(e.target.value, 10);\n\n    if (!Number.isNaN(newDuration) && newDuration > 0) {\n      updateAnimationDuration(newDuration);\n    }\n  };\n\n  const handleStepChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val = parseInt(e.target.value, 10);\n\n    if (val < 1) {\n      updateStep(1);\n\n      return;\n    }\n\n    if (val > images.length) {\n      updateStep(images.length);\n\n      return;\n    }\n\n    updateStep(val);\n  };\n\n  const handleFrameSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val = parseInt(e.target.value, 10);\n\n    if (val < 1) {\n      updateFrameSize(1);\n\n      return;\n    }\n\n    if (val > images.length) {\n      updateFrameSize(images.length);\n\n      return;\n    }\n\n    updateFrameSize(val);\n  };\n\n  useEffect(() => {\n    const scrollWidth = offset * (itemWidth);\n\n    document.documentElement.style.setProperty('--transform-offset', `-${scrollWidth}px`);\n    document.documentElement.style.setProperty('--image-size', `${itemWidth}px`);\n    document.documentElement.style.setProperty('--frame-size', `${frameSize}`);\n    document.documentElement.style.setProperty(\n      '--animation-duration', `${animationDuration}ms`,\n    );\n  }, [offset, itemWidth, frameSize, animationDuration]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <button\n          type=\"button\"\n          onClick={handlePrev}\n          className={`button button--prev ${offset === 0 ? 'disabled' : ''}`}\n        >\n          Prev\n        </button>\n\n        <div\n          className=\"Carousel\"\n          style={carouselStyles}\n        >\n          <ul\n            className=\"Carousel__list transformed\"\n          >\n            {images.map((imgSrc, index) => (\n              <li\n                key={imgSrc}\n                className={`Carousel__item ${index === images.length - 1 ? 'Carousel__item--last' : ''}`}\n              >\n                <img className=\"Carousel__image\" src={imgSrc} alt=\"\" />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <button\n          type=\"button\"\n          onClick={handleNext}\n          className={`button button--next ${offset >= maxOffset ? 'disabled' : ''}`}\n          data-cy=\"next\"\n        >\n          Next\n        </button>\n      </div>\n\n      <div className=\"container--controls\">\n        <div className=\"controls\">\n          <div className=\"controls__item controls__infinite\">\n            <button\n              type=\"button\"\n              className={`button button--controls ${infinite ? 'button--active' : ''}`}\n              onClick={() => updateInfinite(!infinite)}\n            >\n              Toggle Infinite Scroll\n            </button>\n          </div>\n\n          <div className=\"controls__item controls__width \">\n            <input\n              className=\"controls__width controls__input\"\n              type=\"number\"\n              title=\"Enter the item width\"\n              value={itemWidth}\n              min=\"100\"\n              max=\"350\"\n              onChange={handleWidthChange}\n            />\n\n            <div>Set Width</div>\n          </div>\n\n          <div className=\"controls__item controls__animation\">\n            <input\n              type=\"number\"\n              className=\"controls__input\"\n              value={animationDuration}\n              onChange={handleAnimationDurationChange}\n              placeholder=\"Enter duration in ms\"\n            />\n\n            <div>Set Animation Duration</div>\n          </div>\n\n          <div className=\"controls__item controls__step\">\n            <input\n              type=\"number\"\n              className=\"controls__input\"\n              value={step}\n              onChange={handleStepChange}\n              placeholder=\"Step\"\n              min=\"1\"\n              max={images.length}\n            />\n\n            <div>Set Scroll Step</div>\n          </div>\n\n          <div className=\"controls__item controls__frameSize\">\n            <input\n              type=\"number\"\n              className=\"controls__input\"\n              title=\"Enter the frame size\"\n              min=\"1\"\n              max={images.length}\n              value={frameSize}\n              onChange={handleFrameSizeChange}\n            />\n\n            <div>Set Frame Size</div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './styles/main.scss';\n\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  updateStep = (newStep: number) => {\n    this.setState({ step: newStep });\n  };\n\n  updateItemWidth = (newWidth: number) => {\n    this.setState({ itemWidth: newWidth });\n  };\n\n  updateAnimationDuration = (newDuration: number) => {\n    this.setState({ animationDuration: newDuration });\n  };\n\n  updateInfinite = (newInfinite: boolean) => {\n    this.setState({ infinite: newInfinite });\n  };\n\n  updateFrameSize = (newSize: number) => {\n    this.setState({ frameSize: newSize });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      step,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          frameSize={frameSize}\n          updateFrameSize={this.updateFrameSize}\n          step={step}\n          updateStep={this.updateStep}\n          itemWidth={itemWidth}\n          updateItemWidth={this.updateItemWidth}\n          animationDuration={animationDuration}\n          updateAnimationDuration={this.updateAnimationDuration}\n          infinite={infinite}\n          updateInfinite={this.updateInfinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}